[project]
name = "temporal-pipeline"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"

dependencies = [
    "core",
]

[tool.setuptools]
packages = ["core", "cli", "plugins"]

[tool.uv.workspace]
members = [
    "core",
    "cli",
    "plugins/sql_extract",
    "plugins/json_processor",
    "plugins/http_extract",
]

[tool.uv.sources]
core = { workspace = true }
cli = { workspace = true }
sql_extract = { workspace = true }
json_processor = { workspace = true }
http_extract = { workspace = true }

[project.optional-dependencies]
dev = [
    "polyfactory>=2.22.0",
    "pre-commit>=4.2.0",
    "pyright>=1.1.402",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-randomly>=3.16.0",
    "ruff>=0.12.2",
    "testcontainers>=4.10.0",
]

cli = ["cli"]
json_processor = ["json_processor"]
sql_extract = ["sql_extract"]
http_extract = ["http_extract"]
all = [
    "cli",
    "json_processor",
    "sql_extract",
    "http_extract",
]

[tool.ruff]
line-length = 79
target-version = "py313"
fix = true
unsafe-fixes = true

[tool.ruff.lint]
ignore = ["D203", "D212", "S101", "RUF002", "ANN401", "RUF001"]
select = [
    "A", "B", "F", "I", "Q", "ASYNC", "N", "W", "UP",
    "T20", "SIM", "ANN", "PL", "PT", "RET", "E", "S",
    "C4", "EM", "DTZ", "RUF", "TCH", "ARG", "D"
]

[tool.ruff.lint.isort]
known-first-party = ["core", "plugins", "tests"]

[tool.ruff.lint.per-file-ignores]
"core/src/core/cli/__init__.py" = [
    "PLR0913",
    "PLR0912",
    "PLR0915",
    "PLC0415",
    "S603",
]

[tool.pyright]
include = ["core", "plugins"]
pythonVersion = "3.12"

# Tests settings
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = "."

log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--disable-warnings",
    "--cov=core/src",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=60",
    "--junitxml=junit.xml",
]

[tool.coverage.run]
source = [
    "src",
]

omit = [
    "*/tests/*",
    "*/test_*",
    "src/core/yaml_loader/interfaces/*",
    "**/__init__.py",
]

branch = true
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
exclude_lines = [
    "@abstractmethod",
    "@abc.abstractmethod",
    "TYPE_CHECKING",
    "pragma: no cover",
    "raise NotImplementedError",
    "except Exception as e:",
    "except SQLAlchemyError as e",
    "except IntegrityError as e",
    "except EntityNotFoundError",
    "logger.warning.*",
    "logger.error.*",
    "await.*dispose",
    "await.*close",
    ".*cleanup.*",
]

fail_under = 10
show_missing = true
precision = 2